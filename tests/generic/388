#! /bin/bash
# FS QA Test No. 388
#
# Test XFS log recovery ordering on v5 superblock filesystems. XFS had a problem
# where it would incorrectly replay older modifications from the log over more
# recent versions of metadata due to failure to update metadata LSNs during log
# recovery. This could result in false positive reports of corruption during log
# recovery and permanent mount failure.
#
# To test this situation, run frequent shutdowns immediately after log recovery.
# Ensure that log recovery does not recover stale modifications and cause
# spurious corruption reports and/or mount failures.
#
#-----------------------------------------------------------------------
# Copyright (c) 2016 Red Hat, Inc.  All Rights Reserved.
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc.,  51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#-----------------------------------------------------------------------
#

seq=`basename $0`
seqres=$RESULT_DIR/$seq
echo "QA output created by $seq"

here=`pwd`
tmp=/tmp/$$
status=1	# failure is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

_cleanup()
{
	cd /
	rm -f $tmp.*
	$KILLALL_PROG -9 fsstress > /dev/null 2>&1
	_scratch_unmount > /dev/null 2>&1
}

# get standard environment, filters and checks
. ./common/rc

# Modify as appropriate.
_supported_fs generic
_supported_os Linux

_require_scratch
_require_scratch_shutdown
_require_command "$KILLALL_PROG" "killall"

rm -f $seqres.full

echo "Silence is golden."

_scratch_mkfs >> $seqres.full 2>&1
_scratch_mount || _fail "mount failed"

for i in $(seq 1 50); do
	($FSSTRESS_PROG $FSSTRESS_AVOID -d $SCRATCH_MNT -n 999999 -p 4 >> $seqres.full &) \
		> /dev/null 2>&1

	# purposely include 0 second sleeps to test shutdown immediately after
	# recovery
	sleep $((RANDOM % 3))
	./src/godown $SCRATCH_MNT

	ps -e | grep fsstress > /dev/null 2>&1
	while [ $? -eq 0 ]; do
		$KILLALL_PROG -9 fsstress > /dev/null 2>&1
		wait > /dev/null 2>&1
		ps -e | grep fsstress > /dev/null 2>&1
	done

	# quit if mount fails so we don't shutdown the host fs
	_scratch_cycle_mount || _fail "cycle mount failed"
done

# success, all done
status=0
exit
