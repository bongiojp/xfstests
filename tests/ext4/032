#! /bin/bash
# FS QA Test ext4/032
#
# Ext4 online resize tests of small and crucial resizes with bigalloc
# feature.
#
#-----------------------------------------------------------------------
# Copyright (c) 2017 Google, Inc.  All Rights Reserved.
#
# Author: Harshad Shirwadkar <harshads@google.com>
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it would be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.	See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write the Free Software Foundation,
# Inc.,	 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#-----------------------------------------------------------------------

seq=`basename $0`
seqres=$RESULT_DIR/$seq
echo "QA output created by $seq"

here=`pwd`
tmp=/tmp/$$
status=1	# failure is the default!
trap "_cleanup; exit \$status" 0 1 2 3 15

BLKSIZ=4096
bytes2blk()
{
	local bytes=$1
	echo $((bytes / $BLKSIZ))
}

_ext4_online_resize()
{
	local image_file=$1
	local image_mount=$2
	local original_size=$3
	local final_size=$4
	local cluster_size=$5

	echo "+ truncate image file to $(bytes2blk $final_size)"
	$XFS_IO_PROG -f -c "truncate ${final_size}" ${image_file}
	LOOP_DEVICE=`_create_loop_device $image_file || _fail "losetup failed"`

	echo "+ create fs on image file $(bytes2blk $original_size)"
	${MKFS_PROG}.${FSTYP} -F -O bigalloc,resize_inode,metadata_csum \
		    -C ${cluster_size} -b 4096 \
		    ${LOOP_DEVICE} $(bytes2blk $original_size) > \
		    /dev/null 2>&1 || _fail "mkfs failed"

	echo "+ mount image file"
	$MOUNT_PROG -t ${FSTYP} ${LOOP_DEVICE} ${image_mount} > \
		    /dev/null 2>&1 || _fail "mount failed"

	echo "+ resize fs to $(bytes2blk $final_size)"
	resize2fs -f ${LOOP_DEVICE} $(bytes2blk $final_size) >> \
		  $seqres.full 2>&1 || _fail "resize2fs failed"

	echo "+ umount fs"
	$UMOUNT_PROG ${image_mount}

	echo "+ check fs"
	_check_generic_filesystem $LOOP_DEVICE >> $seqres.full 2>&1 || \
	    _fail "fsck should not fail"
	_destroy_loop_device $LOOP_DEVICE && LOOP_DEVICE=
}

_cleanup()
{
	cd /
	[ -n "$LOOP_DEVICE" ] && _destroy_loop_device $LOOP_DEVICE > /dev/null 2>&1
	rm -f $tmp.*
	$UMOUNT_PROG ${IMG_MNT} > /dev/null 2>&1
	rm -f ${IMG_FILE} > /dev/null 2>&1
}

# get standard environment and checks
. ./common/rc

# remove previous $seqres.full before test
rm -f $seqres.full

# real QA test starts here
_supported_fs ext4
_supported_os Linux

_require_loop
_require_scratch
_require_scratch_ext4_feature "bigalloc,resize_inode,metadata_csum"

IMG_FILE=$TEST_DIR/$seq.fs
IMG_MNT=$TEST_DIR/$seq.mnt

rm -f $seqres.full

rmdir $IMG_MNT 2>/dev/null
mkdir -p $IMG_MNT || _fail "cannot create loopback mount point"

## We perform resizing to various multiples of block group sizes to
## ensure that we cover maximum edge cases in the kernel code.
for cluster_size in 4096 16384 65536; do
	echo "+ set cluster size to ${cluster_size}"
	## Extending a 1/2 block group to a 2/3 block group.
	_ext4_online_resize ${IMG_FILE} ${IMG_MNT} \
			    $((16384 * $cluster_size)) \
			    $((24576 * $cluster_size)) ${cluster_size}

	## Extending a 2/3rd block group to one cluster less than a
	## full block group.
	_ext4_online_resize ${IMG_FILE} ${IMG_MNT} \
			    $((24576 * $cluster_size)) \
			    $((32767 * $cluster_size)) ${cluster_size}

	## Extending a 2/3rd block group to a full block group.
	_ext4_online_resize ${IMG_FILE} ${IMG_MNT} \
			    $((24576 * $cluster_size)) \
			    $((32768 * $cluster_size)) ${cluster_size}

	## Extending a 2/3rd block group to 2 block groups.
	_ext4_online_resize ${IMG_FILE} ${IMG_MNT} \
			    $((24576 * $cluster_size)) \
			    $((65536 * $cluster_size)) ${cluster_size}

	## Extending a 2/3rd block group to 15 block groups and one
	## cluster.
	_ext4_online_resize ${IMG_FILE} ${IMG_MNT} \
			    $((24576 * $cluster_size)) \
			    $((491521 * $cluster_size)) ${cluster_size}

	## Extending a 2/3rd block group to 15 and a half block groups.
	_ext4_online_resize ${IMG_FILE} ${IMG_MNT} \
			    $((24576 * $cluster_size)) \
			    $((507904 * $cluster_size)) ${cluster_size}

	## Extending a 2/3rd block group to 16 block groups.
	_ext4_online_resize ${IMG_FILE} ${IMG_MNT} \
			    $((24576 * $cluster_size)) \
			    $((524288 * $cluster_size)) ${cluster_size}

	## Extending a 2/3rd block group to 160 block groups.
	_ext4_online_resize ${IMG_FILE} ${IMG_MNT} \
			    $((24576 * $cluster_size)) \
			    $((5242880 * $cluster_size)) ${cluster_size}
done

status=0
exit
