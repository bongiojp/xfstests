#! /bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (c) 2000-2005 Silicon Graphics, Inc.  All Rights Reserved.
#
# Test the set/get UUID ioctl.
#

. ./common/preamble
_begin_fstest auto ioctl resize

tmpfile="/tmp/$$."
trap "rm -f $tmpfile; exit" 0 1 2 3 15

# Import common functions.
. ./common/filter

# real QA test starts here
_supported_fs ext4
_require_scratch
_require_test_program uuid_ioctl

UUID_IOCTL=$here/src/uuid_ioctl

# if the ioctl is not supported by the kernel, then skip test.
current_uid=$($UUID_IOCTL get $SCRATCH_MNT)
if [[ "$current_uid" = "Inappropriate ioctl for device while trying to set fs uuid" ]]; then
  _notrun "UUID ioctls are not supported by kernel."
fi

# Create filesystem and mount
_scratch_mkfs_ext4 -O metadata_csum_seed >> $seqres.full 2>&1
_scratch_mount >> $seqres.full

# Begin fsstress while modifying UUID
fsstress_args=$(_scale_fsstress_args -d $SCRATCH_MNT -p 15 -n 999999)
"$FSSTRESS_PROG" $fsstress_args > /dev/null &

test_uuid_ioctl()
{
  for n in $(seq 1 20); do
    new_uuid=$(uuidgen)

    echo "Setting UUID to ${new_uuid}" >> $seqres.full 2>&1
    $UUID_IOCTL set $SCRATCH_MNT $new_uuid >> $seqres.full 2>&1

    current_uuid=$($UUID_IOCTL get $SCRATCH_MNT)
    echo "$UUID_IOCTL get $SCARTCH_MNT: $current_uuid" >> $seqres.full 2>&1
    if [[ "$current_uuid" != "$new_uuid" ]]; then
      echo "UUID does not equal what was sent with the ioctl"
      exit
    fi
  done
}

test_uuid_ioctl

# success, all done
status=0
exit
